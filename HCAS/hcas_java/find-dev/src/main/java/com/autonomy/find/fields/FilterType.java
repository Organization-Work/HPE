//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.05.17 at 06:33:42 AM EDT 
//


package com.autonomy.find.fields;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for filterType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="filterType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="date"/>
 *     &lt;enumeration value="documentfolder"/>
 *     &lt;enumeration value="match"/>
 *     &lt;enumeration value="numeric"/>
 *     &lt;enumeration value="pararanges"/>
 *     &lt;enumeration value="text"/>
 *     &lt;enumeration value="asofdate"/>
 *     &lt;enumeration value="monthpartition"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "filterType")
@XmlEnum
public enum FilterType {

    @XmlEnumValue("date")
    DATE("date"),
    @XmlEnumValue("documentfolder")
    DOCUMENTFOLDER("documentfolder"),
    @XmlEnumValue("match")
    MATCH("match"),
    @XmlEnumValue("numeric")
    NUMERIC("numeric"),
    @XmlEnumValue("pararanges")
    PARARANGES("pararanges"),
    @XmlEnumValue("text")
    TEXT("text"),
    @XmlEnumValue("asofdate")
    ASOFDATE("asofdate"),
    @XmlEnumValue("monthpartition")
    MONTHPART("monthpartition"),
    @XmlEnumValue("hasfilter")
    HASFILTER("hasfilter");
   
    private final String value;

    FilterType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static FilterType fromValue(String v) {
        for (FilterType c: FilterType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
