package com.autonomy.find.controllers;

/*
 * $Id: //depot/scratch/frontend/find-healthcare/src/main/java/com/autonomy/find/controllers/DocumentFolderController.java#18 $
 *
 * Copyright (c) 2013, Autonomy Systems Ltd.
 *
 * Last modified by $Author: wo $ on $Date: 2014/05/13 $ 
 */

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.autonomy.find.api.database.DocumentFolder;
import com.autonomy.find.config.SearchConfig;
import com.autonomy.find.dto.Parametric.DocExportData;
import com.autonomy.find.dto.Parametric.DocImportData;
import com.autonomy.find.dto.Parametric.DocImportType;
import com.autonomy.find.services.DocumentFolderService;
import com.autonomy.find.util.SessionHelper;
import com.autonomy.find.util.audit.AuditActions;
import com.autonomy.find.util.audit.AuditLogger;

@Controller
@RequestMapping("/p/ajax/documentfolder")
public class DocumentFolderController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DocumentFolderController.class);

    private static final String SELECTED_SESSION_KEY = DocumentFolder.class.getCanonicalName() + "-selected";

    @Autowired
    private DocumentFolderService documentFolderService;

    @Autowired
    private SessionHelper sessionHelper;
    
    @Autowired
 	private SearchConfig searchConfig;


    @RequestMapping(value = {"/addFolder.json"}, method = RequestMethod.POST)
    @ResponseBody
    public DocumentFolder add(
            @RequestParam(value = "tooltip", required = false) final String tooltip,
            @RequestParam("searchView") final String searchView,
            @RequestParam("label") final String label,
            @RequestParam("isShared") final boolean isShared,
            @RequestParam("folderType") final String folderType,
            final HttpSession session
    ) {
        final String loginUser = sessionHelper.getSessionUser(session);

        final DocumentFolder folder = documentFolderService.add(new DocumentFolder(tooltip, searchView, label, false, loginUser, isShared, folderType));

        AuditLogger.log(loginUser, AuditActions.DOCFOLDER_CREATE, folder);

        return folder;
    }

    @RequestMapping(value = {"/getFolders.json"}, method = RequestMethod.POST)
    @ResponseBody
    public List<DocumentFolder> getFolders(
            @RequestParam("searchView") final String searchView,
            final HttpSession session
    ) {
        final List<DocumentFolder> folders = documentFolderService.getFolders(searchView, sessionHelper.getSessionUser(session));
        

        final Set<Integer> map = getSelectionMap(session).get(searchView);

        if (map != null) {
            for (final DocumentFolder folder : folders) {
                folder.setSelected(map.contains(folder.getId()));
            }
        }

        return folders;
    }

    @RequestMapping(value = {"/tag.json"}, method = RequestMethod.POST)
    @ResponseBody
    public Boolean tag(
            @RequestParam("id") final int id,
            @RequestParam("ref") final String[] ref,
            final HttpSession session
    ) {
        final String loginUser = sessionHelper.getSessionUser(session);

        final Map<String, Object> auditData = AuditLogger.getDataMap();
        auditData.put("folderId", id);
        auditData.put("ref", ref);

        AuditLogger.log(loginUser, AuditActions.DOCFOLDER_TAG, auditData);

        return documentFolderService.tag(loginUser, id, false, ref);
    }
    
    @RequestMapping(value = {"/istag.json"}, method = RequestMethod.POST)
    @ResponseBody
    public Boolean isTagged(
            @RequestParam("id") final int id,
            @RequestParam("ref") final String ref,
            final HttpSession session
    ) {
       return documentFolderService.isRefInFolder(id, ref);
    }

    @RequestMapping(value = {"/untag.json"}, method = RequestMethod.POST)
    @ResponseBody
    public Boolean untag(
            @RequestParam("id") final int id,
            @RequestParam("ref") final String[] ref,
            final HttpSession session
    ) {
        final String loginUser = sessionHelper.getSessionUser(session);

        final Map<String, Object> auditData = AuditLogger.getDataMap();
        auditData.put("folderId", id);
        auditData.put("ref", ref);

        AuditLogger.log(loginUser, AuditActions.DOCFOLDER_UNTAG, auditData);

        return documentFolderService.untag(loginUser, id, false, ref);
    }

    @RequestMapping(value = {"/getTags.json"}, method = RequestMethod.POST)
    @ResponseBody
    public Set<String> getTags(
            @RequestParam("id") final int id,
            final HttpSession session
    ) {
        return documentFolderService.getTags(id, sessionHelper.getSessionUser(session));
    }

    @RequestMapping(value = {"/editFolder.json"}, method = RequestMethod.POST)
    @ResponseBody
    public DocumentFolder edit(
            @RequestParam("id") final int id,
            @RequestParam(value = "tooltip", required = false) final String tooltip,
            @RequestParam(value = "label", required = false) final String label,
            @RequestParam(value="isShared") final boolean isShared,
            final HttpSession session
    ) {

        final String loginUser = sessionHelper.getSessionUser(session);

        final Map<String, Object> auditData = AuditLogger.getDataMap();
        auditData.put("folderId", id);
        auditData.put("tooltip", tooltip);
        auditData.put("label", label);
        auditData.put("isShared", isShared);

        AuditLogger.log(loginUser, AuditActions.DOCFOLDER_EDIT, auditData);


        return documentFolderService.edit(id, tooltip, label, loginUser, isShared);
    }

    @RequestMapping(value = {"/deleteFolder.json"}, method = RequestMethod.POST)
    @ResponseBody
    public void delete(
        @RequestParam("id") final int id,
        final HttpSession session
    ) {
        final String loginUser = sessionHelper.getSessionUser(session);

        final Map<String, Object> auditData = AuditLogger.getDataMap();
        auditData.put("folderId", id);

        AuditLogger.log(loginUser, AuditActions.DOCFOLDER_DELETE, auditData);


        documentFolderService.delete(id, loginUser);
    }

    @RequestMapping(value = "/setSelected", method = RequestMethod.POST)
    @ResponseBody
    public void setSelectedFolders(
        @RequestParam("searchView") final String searchView,
        @RequestBody final Set<Integer> ids,
        final HttpSession session
    ) {
        getSelectionMap(session).put(searchView, ids);
    }

    public Map<String, Set<Integer>> getSelectionMap(final HttpSession session) {
        //noinspection unchecked
        Map<String, Set<Integer>> map = (Map<String, Set<Integer>>) session.getAttribute(SELECTED_SESSION_KEY);

        if (map != null) {
            return map;
        }

        map = new HashMap<>();
        session.setAttribute(SELECTED_SESSION_KEY, map);

        return map;
    }

    @RequestMapping(value = {"/getImportTypes.json"}, method = RequestMethod.POST)
    @ResponseBody
    public Map<String, DocImportType> getImportTypes(
            @RequestParam("searchView") final String searchView
    ) {
        return documentFolderService.getDocImportTypes(searchView);
    }

    @RequestMapping(value = {"/docImportData.json"}, method = RequestMethod.POST)
    @ResponseBody
    public Integer docImportData(
            @RequestBody final DocImportData docImportData,
            final HttpSession session
    ) {
    	if(searchConfig.getSearchViews().get(docImportData.getSearchView()).getRepository().equalsIgnoreCase("IDOL")) {
    		return documentFolderService.importData(docImportData, sessionHelper.getSessionUser(session), sessionHelper.getUserSecurityInfo(session));
    	} else {
    		return documentFolderService.importDataVertica(docImportData, sessionHelper.getSessionUser(session), sessionHelper.getUserSecurityInfo(session));
    	}
        
    }

    @RequestMapping(value = {"/exportDocFolder.do"}, method = RequestMethod.POST, consumes = "application/x-www-form-urlencoded")
    public ModelAndView exportDocFolder(
            @ModelAttribute final DocExportData docExportData,
            final HttpServletResponse response,
            final HttpSession session,
            final RedirectAttributes attrs
    ) {
        final String filename = docExportData.getExportFilename();
        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "\"" );
        response.setContentType("text/*");
        try {
        	if(searchConfig.getSearchViews().get(docExportData.getSearchView()).getRepository().equalsIgnoreCase("IDOL")) {
        		documentFolderService.exportDocFolder(docExportData, sessionHelper.getSessionUser(session), response.getWriter(), sessionHelper.getUserSecurityInfo(session));
        	} else {
        		documentFolderService.exportDocFolderVertica(docExportData, sessionHelper.getSessionUser(session), response.getWriter(), sessionHelper.getUserSecurityInfo(session));
        	}

            return null;
        } catch (Exception ex) {
            LOGGER.error("Failed export doc folder.", ex);

            attrs.addFlashAttribute("exception", ex);
            return new ModelAndView("redirect:/p/error.do");
        }

    }

    @RequestMapping(value = {"/exportResults.do"}, method = RequestMethod.POST, consumes = "application/x-www-form-urlencoded")
    public ModelAndView exportResults(
            @ModelAttribute final DocExportData docExportData,
            final HttpServletResponse response,
            final HttpSession session,
            final RedirectAttributes attrs
    ) {
        final String filename = docExportData.getExportFilename();
        response.setContentType("text/*");
        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "\"" );

        try {
        	 if(searchConfig.getSearchViews().get(docExportData.getSearchView()).getRepository().equalsIgnoreCase("IDOL")) {
        		 documentFolderService.exportResults(docExportData, sessionHelper.getSessionUser(session), response.getWriter(), sessionHelper.getUserSecurityInfo(session));
        	 } else {
        		 documentFolderService.exportResultsVertica(docExportData, sessionHelper.getSessionUser(session), response.getWriter(), sessionHelper.getUserSecurityInfo(session));
        	 }

            return null;

        } catch (Exception ex) {
            LOGGER.error("Failed export results.", ex);

            attrs.addFlashAttribute("exception", ex);
            return new ModelAndView("redirect:/p/error.do");
        }

    }

    @RequestMapping(value = {"/tagResults.json"}, method = RequestMethod.POST)
    @ResponseBody
    public Boolean tagResults(
            @RequestBody final DocExportData docExportData,
            final HttpSession session
    ) throws Exception {
    	
	    	if(searchConfig.getSearchViews().get(docExportData.getSearchView()).getRepository().equalsIgnoreCase("IDOL")) {
	    		return documentFolderService.tagResults(docExportData, sessionHelper.getSessionUser(session), sessionHelper.getUserSecurityInfo(session));
	    	} else {
	    		return documentFolderService.tagResultsVertica(docExportData, sessionHelper.getSessionUser(session), sessionHelper.getUserSecurityInfo(session));
	    	}
    	
    }
}
