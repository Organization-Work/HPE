discover.brandName=${discover.brandName}

#==============
# IDOL engines
#==============
content.host=${content.host}
content.aciPort=${content.aciPort}

community.host=${community.host}
community.aciPort=${community.aciPort}
community.agentstore.host=${community.agentstore.host}
community.agentstore.port=${community.agentstore.port}

# Name of the configured IDOL security respository to use. User login will be authenticated against that repository.
community.repository.type=${community.repository.type}


#=====================
# PostgreSQL Database
#=====================
find-db.url=${find-db.url}
find-db.username=${find-db.username}
find-db.password=${find-db.password}
find-db.driver=${find-db.driver}
find-db.maxActive=50
find-db.maxIdle=10
find-db.validationQuery=select version();


#==============
# SSO Settings
#==============
cas.client.service=${cas.client.service}
cas.server.login.url=${cas.server.login.url}
cas.server.logout.url=${cas.server.logout.url}

#=================
# Custom Settings
#=================

# Configuration to set TopicMap default search branch. Supported values: [SNOMED | FIELDS],
# 'SNOMED' for snomed concepts, 'FIELDS' for filter fields.
discoverSearch.topicBranch.default=${discoverSearch.topicBranch.default}

# Configuration to enable the text/wildcard searches in IDOL, can be used to search IDOL from Vertica views in integrated setups,
# this should always be set to False for Vertica only setups. If enabled for an integrated setup, the vertica view database name 
# should match the idol database name for successful searches
discoverSearch.textSearch.enabled=${discoverSearch.textSearch.enabled}

# Set this to true only for integrated (IDOL+VERTICA) setups
discoverSearch.viewDoc.IdolEnabled=${discoverSearch.viewDoc.IdolEnabled}

discoverSearch.viewDoc.documentFileExtension=${discoverSearch.viewDoc.documentFileExtension}

discoverSearch.timeline.maxValues=${discoverSearch.timeline.maxValues}
discoverSearch.viewDoc.documentsRootDirectory=${discoverSearch.viewDoc.documentsRootDirectory}

# Configuration for the search view (or scope). 
# Each search view needs to have the following properties defined in the JSON format:
#		"name": unique view id
#		"displayName": view name to be displayed in UI
#		"database": name of IDOL database used for this view
#		"snomedTag": the Concept IDOL fieldname  
#		"snomedParentTag": the Concept+ IDOL fieldname
#		"filterFieldsFile": definition file that lists all the filter fields
#		"docImportFile": definition file that lists fields that can be used in documentfolder data import.
#		"docviewFile": definition file that list fields and panels to be rendered in document viewer.
#		"defaultView": if this is the default view (for multiple views setup). Supported values: [true | false]
#		"idolRootElement": the IDOL document root xpath. e.g., 'DOCUMENTS/DOCUMENT'
#		"docRefField": the defined IDOL document reference field, see SetReferenceField in the sample AutonomyIDOLServer.cfg file.
#		"ptCohortField": the defined IDOL document fieldCheck field. see SetFieldCheckFields and SetPatientReferenceFields in the sample AutonomyIDOLServer.cfg file.
#		"resultView": names of the supported result views
#
discoverSearch.searchViews=${discoverSearch.searchViews}

discoverSearch.vertica.date.format=${discoverSearch.vertica.date.format}

# Schema for validating the filter fields configuration defined in discoverSearch.searchViews' 'filterFieldsFile'
discoverSearch.filters.schema=${discoverSearch.filters.schema}


# Schema for validating the vertica table mapping
discoverSearch.mapping.table.schema=${discoverSearch.mapping.table.schema}

discoverSearch.mapping.table.file=${discoverSearch.mapping.table.file}

# Schema for validating the vertica table relations
discoverSearch.table.relation.schema=${discoverSearch.table.relation.schema}

discoverSearch.table.relation.file=${discoverSearch.table.relation.file}

# Configuration for fields to be displayed in results view.
#discoverSearch.displayFields=${discoverSearch.displayFields}

discoverSearch.groupingFields=${discoverSearch.groupingFields}

# Comma separated list of display fields that are allowed to be shown in a redacted document
discoverSearch.censor.permittedFields=${discoverSearch.censor.permittedFields}

# Display field to match the values in the whitelist to check if a document should be redacted.
discoverSearch.censor.redactionField=${discoverSearch.censor.redactionField}

# Whitelist file to list the document that is permitted to be viewed.
discoverSearch.censor.whitelist=${discoverSearch.censor.whitelist}

# XPath of the Concept field in the indexed document
discoverSearch.viewDoc.xPath.conceptRef=${discoverSearch.viewDoc.xPath.conceptRef}

# XPath of the Concept+ field in the indexed document
discoverSearch.viewDoc.xPath.conceptPlusRef=${discoverSearch.viewDoc.xPath.conceptPlusRef}

# XPath of the UIMA field in the indexed document
discoverSearch.viewDoc.xPath.uimaRef=${discoverSearch.viewDoc.xPath.uimaRef}

# XPath of the DOCUMENT root field in the vertica map-doc template
discoverSearch.viewDoc.xPath.templateDocRoot=${discoverSearch.viewDoc.xPath.templateDocRoot}


#=================
# Optional config
#=================

# Admin console superuser default password.
adminConsole.superUserDefaultPassword=${adminConsole.superUserDefaultPassword}

# Enable single sign-on support, values: [true | false]
discover.sso=${discover.sso}

# Whether to allow user password login, values: [true | false]
discover.userpass=${discover.userpass}

# Whether to allow register new user via login, values: [true | false]
discover.canRegister=${discover.canRegister}

# Regular expression pattern to generate the audit log filename
discover.auditFilePattern=${discover.auditFilePattern}

# Audit log file directory. Default relative to the $tomcatDir/bin directory
discover.auditLogDir=${discover.auditLogDir}

# Default maximum documents for results tagging or fields export
discoverSearch.docfolder.maxResults=${discoverSearch.docfolder.maxResults}

# The transport protocol used to communicate with IDOL components, supported values: [HTTP | HTTPS]
discoverSearch.aci.transport.protocol=${discoverSearch.aci.transport.protocol}

# Whether to preload all filters values. Set to false if need to enhance loading performance for large dataset. Values: [true | false]
discoverSearch.parametric.preloadValues=${discoverSearch.parametric.preloadValues}

# XSLT file for formatting linked content to be shown in docview.
discoverSearch.default.linkContentTemplate=${discoverSearch.default.linkContentTemplate}

# Display Terms and Conditions message on Login Page
discover.displayTnCMessage=${discover.displayTnCMessage}

# Help file path/name
discover.helpFile=${discover.helpFile}
discover.showBrandLogo=${discover.showBrandLogo}

#-----------------  UI Label Names ---------------#
discover.ui.measurement.variable.dropdown.label=${discover.ui.measurement.variable.dropdown.label}
discover.ui.results.action.tag.label=${discover.ui.results.action.tag.label}



#==============================================================================================================================
# Internal search related settings. Not recommended to be changed by users without consulting Autonomy consultants or support.
#==============================================================================================================================
idol.combine=${idol.combine}
discoverSearch.combine=${idol.combine}
discoverSearch.summary=${discoverSearch.summary}
discoverSearch.languageType=${discoverSearch.languageType}
discoverSearch.outputEncoding=${discoverSearch.outputEncoding}

discoverSearch.import.delimiter=${discoverSearch.import.delimiter}
discoverSearch.import.batchsize=${discoverSearch.import.batchsize}
discoverSearch.export.batchsize=${discoverSearch.export.batchsize}

discoverSearch.tableview.maxFieldPairValues=${discoverSearch.tableview.maxFieldPairValues}

discoverSearch.parametric.singleQueryFieldname=${discoverSearch.parametric.singleQueryFieldname}
discoverSearch.parametric.threads=${discoverSearch.parametric.threads}
discoverSearch.parametric.retries=${discoverSearch.parametric.retries}

discoverSearch.topicmap.maxValues=${discoverSearch.topicmap.maxValues}

discoverSearch.sunburst.maxValues=${discoverSearch.sunburst.maxValues}
discoverSearch.sunburst.singleQueryFieldname=${discoverSearch.sunburst.singleQueryFieldname}

discoverSearch.viewDoc.xPath.docRoot=${discoverSearch.viewDoc.xPath.docRoot}
discoverSearch.culledSuperCategories=${discoverSearch.culledSuperCategories}
discoverSearch.viewDoc.xPath.agentstoreRef=${discoverSearch.viewDoc.xPath.agentstoreRef}

# Write all SQL statements to console. Values; [true | false]
hibernate.show_sql=${hibernate.show_sql}

# Automatically validates or exports schema DDL to the database when the hibernate SessionFactory is created.
# Supported values: [update | create | create-drop | validate | none]
hibernate.hbm2ddl.auto=${hibernate.hbm2ddl.auto}



#=========================
# Vertica Database
#=========================
vertica.driverClassName=${vertica.driverClassName}
vertica.connectionProperties=${vertica.connectionProperties}
vertica.url=${vertica.url}
vertica.username=${vertica.username}
vertica.password=${vertica.password}
vertica.removeAbandoned=${vertica.removeAbandoned}
vertica.removeAbandonedOnBorrow=${vertica.removeAbandonedOnBorrow}
vertica.removeAbandonedOnMaintenance=${vertica.removeAbandonedOnMaintenance}
vertica.removeAbandonedTimeout=${vertica.removeAbandonedTimeout}
vertica.initialSize=${vertica.initialSize}
vertica.maxActive=${vertica.maxActive} 
vertica.maxTotal=${vertica.maxTotal}
vertica.maxIdle=${vertica.maxIdle}
vertica.minIdle=${vertica.minIdle}
vertica.testOnBorrow=${vertica.testOnBorrow}
vertica.testOnConnect=${vertica.testOnConnect}
vertica.testWhileIdle=${vertica.testWhileIdle}
vertica.validationQuery=${vertica.validationQuery}
vertica.timeBetweenEvictionRunsMillis=${vertica.timeBetweenEvictionRunsMillis}
vertica.logAbandoned=${vertica.logAbandoned}