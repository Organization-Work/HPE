//
// HPE Face Extractor templated Media Server configuration.
//


// ======================= Ingest =======================
[Ingest]
IngestEngine = LibAV
^REALTIME^IngestRate = 0

[LibAV]
Type = libav
IngestTime = 0
EnabledStreamTypes = video


// ======================= Analysis =======================
[Analysis]
AnalysisEngine0 = FaceDetect
AnalysisEngine1 = FaceRecognize

[FaceDetect]
Type = facedetect
SampleInterval = ^SAMPLEINTERVAL^
NumParallel = ^NUMPARALLEL^
MinSize = ^MINSIZE^
SizeUnit = pixel
DetectEyes = true
ColorAnalysis = ^COLORANALYSIS^
DetectTilted = ^DETECTTITLED^
FaceDirection = ^FACEDIRECTION^
Orientation = ^ORIENTATION^

[FaceRecognize]
Type = facerecognize
Input = FaceDetect.ResultWithSource
Database = ^FACEDB^
MaxRecognitionResults = 1
RecognitionThreshold = ^RECOGNITIONTHRESHOLD^


// ======================= EventProcessing =======================
[EventProcessing]
EventProcessingEngine0 = RecognisedFace
EventProcessingEngine1 = RecognisedFaceNoSource
EventProcessingEngine2 = UnRecognisedFace
^ALLDATA^EventProcessingEngine3 = DeduplicateDataTrack

[RecognisedFace]
Type = Filter
Input = FaceRecognize.ResultWithSource
LuaScript = ^LUADIR^/recognisedFaceResultWithSource.lua

[RecognisedFaceNoSource]
Type = Filter
Input = FaceRecognize.Result
LuaScript = ^LUADIR^/recognisedFaceResult.lua

[UnRecognisedFace]
Type = Filter
Input = FaceRecognize.ResultWithSource
LuaScript = ^LUADIR^/unRecognisedFaceResultWithSource.lua

[DeduplicateDataTrack]
Type = Deduplicate
Input = FaceDetect.DataWithSource
MinTimeInterval = ^FACEOUTPUTINTERVAL^
PredicateType = lua
LuaScript = ^LUADIR^/deduplicateFaceData.lua


// ======================= Transform =======================
[Transform]
TransformEngine0 = CropUnRecognisedFace
TransformEngine1 = CropRecognisedFace
^ALLDATA^TransformEngine2 = CropAnyFace

[CropRecognisedFace]
Type = crop
Border = 3
BorderUnit = percent
Input = RecognisedFace.Output

[CropUnRecognisedFace]
Type = crop
Border = 3
BorderUnit = percent
Input = UnRecognisedFace.Output

[CropAnyFace]
Type = crop
Border = 3
BorderUnit = percent
Input = DeduplicateDataTrack.Output


// ======================= Encoding =======================
[Encoding]
EncodingEngine0 = StoreUnRecognisedCroppedFace
EncodingEngine1 = StoreUnRecognisedFullFrame
EncodingEngine2 = StoreRecognisedCroppedFace
EncodingEngine3 = StoreRecognisedFullFrame
^ALLDATA^EncodingEngine4 = StoreAllTrackFaces

[StoreUnRecognisedCroppedFace]
Type = imageencoder
ImageInput = CropUnRecognisedFace.Output
OutputPath = ^FACEPATH^/%record.id.uuid%/%record.id.uuid%_%record.peaktime.hour%-%record.peaktime.minute%-%record.peaktime.second%_crop.jpg

[StoreUnRecognisedFullFrame]
Type = imageencoder
ImageInput = UnRecognisedFace.Output
OutputPath = ^FACEPATH^/%record.id.uuid%/%record.id.uuid%_%record.peaktime.hour%-%record.peaktime.minute%-%record.peaktime.second%_full.jpg

[StoreRecognisedCroppedFace]
Type = imageencoder
ImageInput = CropRecognisedFace.Output
OutputPath = ^FACEPATH^/%record.identity.identifier%/matched_%record.id.uuid%_%record.peaktime.hour%-%record.peaktime.minute%-%record.peaktime.second%_crop.jpg

[StoreRecognisedFullFrame]
Type = imageencoder
ImageInput = RecognisedFace.Output
OutputPath = ^FACEPATH^/%record.identity.identifier%/matched_%record.id.uuid%_%record.peaktime.hour%-%record.peaktime.minute%-%record.peaktime.second%_full.jpg

[StoreAllTrackFaces]
Type = imageencoder
ImageInput = CropAnyFace.Output
OutputPath = ^FACEPATH^/%record.id.uuid%/allFaces/%record.peaktime.hour%-%record.peaktime.minute%-%record.peaktime.second%_%uuid%.jpg


// ======================= Output =======================
[Output]
OutputEngine0 = WriteRecognisedFaceMetadata
OutputEngine1 = WriteUnrecognisedFaceMetadata
OutputEngine2 = TrainNewFace
OutputEngine3 = AddExtraFace
OutputEngine6 = ResponseEngine
^CREATECLIPANDALLDATA^OutputEngine4 = CreateClip
^CREATECLIPANDALLDATA^OutputEngine5 = MoveDataCrops
^CREATECLIPONLY^OutputEngine4 = CreateClip
^ALLDATAONLY^OutputEngine4 = MoveDataCrops

[WriteRecognisedFaceMetadata]
Type = xml
Mode = SingleRecord
Input = RecognisedFace.Output
XMLOutputPath = ^FACEPATH^/%record.identity.identifier%/matched_%record.id.uuid%_%record.peaktime.hour%-%record.peaktime.minute%-%record.peaktime.second%.txt
XSLTemplate = ^XSLPATH^/toFaceMetadata.xsl

[WriteUnrecognisedFaceMetadata]
Type = xml
Mode = SingleRecord
Input = UnRecognisedFace.Output
XMLOutputPath = ^FACEPATH^/%record.id.uuid%/%record.id.uuid%_%record.peaktime.hour%-%record.peaktime.minute%-%record.peaktime.second%.txt
XSLTemplate = ^XSLPATH^/toFaceMetadata.xsl

[TrainNewFace]
Type = httppost
Mode = SingleRecord
Input = StoreUnRecognisedCroppedFace.Proxy
XMLOutputPath = ^FAILEDPATH^
DestinationURL = http://^HOST^:^PORT^/trainNewFace

[AddExtraFace]
Type = httppost
Mode = SingleRecord
Input = StoreRecognisedCroppedFace.Proxy
XMLOutputPath = ^FAILEDPATH^
DestinationURL = http://^HOST^:^PORT^/addExtraFace

[CreateClip]
Type = httppost
Mode = SingleRecord
Input = StoreRecognisedCroppedFace.Proxy,StoreUnRecognisedCroppedFace.Proxy
XMLOutputPath = ^FAILEDPATH^
DestinationURL = http://^HOST^:^PORT^/createClip

[MoveDataCrops]
Type = httppost
Mode = Bounded
Input = RecognisedFaceNoSource.Output,StoreAllTrackFaces.Proxy
EventTrack = RecognisedFaceNoSource.OutputCropAnyFace.Output
XMLOutputPath = ^FAILEDPATH^
SavePreXML = true
DestinationURL = http://^HOST^:^PORT^/moveDataCrops

[ResponseEngine]
Type=Response
Input=StoreAllTrackFaces.Proxy,StoreUnRecognisedCroppedFace.Proxy,StoreUnRecognisedFullFrame.Proxy,StoreRecognisedCroppedFace.Proxy,StoreRecognisedFullFrame.Proxy
